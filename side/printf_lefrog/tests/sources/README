# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    README                                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: amulin <amulin@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2015/12/08 12:16:57 by amulin            #+#    #+#              #
#    Updated: 2015/12/08 13:46:53 by amulin           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

New design to be implemented for the printf testing program:

1/ Each test input and output is stored in an element of a list.
	1.1/ The element is created, and memory allocated. 
	1.2/ The input is passed to the element through a dedicated function. Each 
		 input element is composed of :
		 	- a unique identifier 'index'
			- a sequence identifier 'seq_id'
			- a sequence title 'seq_title'
			- a section identifier 'sec_id'
			- a section title 'sec_title'
		 	- a format string 'format'
			- an optional argument 'arg'
			- an optional argument type 'type'
	1.3/ The output elements are left blank. They are :
			- a string for the printf output 'refout'
			- a string for the ft_printf output 'testout'
			- a flag for the result of output comparison 'matching'
	1.4/ The next element pointer is stored in next.


2/ Once all inputs are loaded into the list, the testing may begin.
	2.1/ The list element is passed to the unit testing function.
	2.2/ The standard output is redirected to a temporary file A.
	2.3/ The string, (optional) argument and (optional) argument type are
		 passed to the printf() function.
	2.4/ The standard output is redirected to a temporary file B.
	2.5/ The string, (optional) argument and (optional) argument type are
		 passed to the ft_printf() function.
	2.6/ The standard output is reset to the terminal /dev/tty.
	2.7/ The content of file A is copied to refout using get_next_line.
	2.8/ The content of file B is copied to testout using get_next_line.
	2.9/ The element is passed to a function that will compare both outputs
		 and set the correctness flag 'matching' accordingly.


3/ The results of the test is printed on terminal.
	3.1/ The section title is printed (centered) on terminal once.
	3.2/ The sequence title is printed on terminal at the begining of the 
		 line.
	3.3/ The state of the 'matching' flag is printed on terminal, in the form
		 of a green check mark for state 1 and a red cross for state 0.
		 If the test sequence is too long for all results to be printed on a
		 single line, then \n and go to 3.2/
	3.4/ Go to 2.1/ until end of list.

	---------------------- Starting Conversion Tests --------------------

	01 -  %c conversion :	✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔
	02 -  %c conversion :	✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔  
	

4/ A summary of the test is printed on terminal
	4.1/ The summary title is centered on terminal.
	4.2/ The global result are shown (in colored output), for example:
			1542 tests executed, 1500 valid, 42 failed.
	4.3/ A table showing the failed tests is shown :

	INDEX	FORMAT	ARG				TYPE		REFOUT			TESTOUT
	456		%#x		0				int			0				0x0
	942		%s		ifr/4\d ...		char*		ifr/4\d ...		ifr/4??! ...

	4.4/ The user is prompted to enter the index of a test to see more detailed
		 information and untruncated input and output strings :
		 	Enter an index to view more details, or type quit to exit the program:
			> 456_

	4.5/ The detailed view should look something like this :
			
			___________________________________________INFO
			Test index 		:	456
			Section 		:	%x conversion
			Sequence 		:	'#' flag

			__________________________________________INPUT
			Format string	:	%#x
			Argument 		:	0
			Type 			:	int

			_________________________________________OUTPUT
			Reference 		:	0
			Tested			:	0x0
			Status			:	Failed



